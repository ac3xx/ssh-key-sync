package config

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
)

// LoaderMock implements Loader
type LoaderMock struct {
	t minimock.Tester

	funcLoad          func() (op1 *Options, err error)
	afterLoadCounter  uint64
	beforeLoadCounter uint64
	LoadMock          mLoaderMockLoad
}

// NewLoaderMock returns a mock for Loader
func NewLoaderMock(t minimock.Tester) *LoaderMock {
	m := &LoaderMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.LoadMock = mLoaderMockLoad{mock: m}

	return m
}

type mLoaderMockLoad struct {
	mock               *LoaderMock
	defaultExpectation *LoaderMockLoadExpectation
	expectations       []*LoaderMockLoadExpectation
}

// LoaderMockLoadExpectation specifies expectation struct of the Loader.Load
type LoaderMockLoadExpectation struct {
	mock *LoaderMock

	results *LoaderMockLoadResults
	Counter uint64
}

// LoaderMockLoadResults contains results of the Loader.Load
type LoaderMockLoadResults struct {
	op1 *Options
	err error
}

// Expect sets up expected params for Loader.Load
func (mmLoad *mLoaderMockLoad) Expect() *mLoaderMockLoad {
	if mmLoad.mock.funcLoad != nil {
		mmLoad.mock.t.Fatalf("LoaderMock.Load mock is already set by Set")
	}

	if mmLoad.defaultExpectation == nil {
		mmLoad.defaultExpectation = &LoaderMockLoadExpectation{}
	}

	return mmLoad
}

// Return sets up results that will be returned by Loader.Load
func (mmLoad *mLoaderMockLoad) Return(op1 *Options, err error) *LoaderMock {
	if mmLoad.mock.funcLoad != nil {
		mmLoad.mock.t.Fatalf("LoaderMock.Load mock is already set by Set")
	}

	if mmLoad.defaultExpectation == nil {
		mmLoad.defaultExpectation = &LoaderMockLoadExpectation{mock: mmLoad.mock}
	}
	mmLoad.defaultExpectation.results = &LoaderMockLoadResults{op1, err}
	return mmLoad.mock
}

//Set uses given function f to mock the Loader.Load method
func (mmLoad *mLoaderMockLoad) Set(f func() (op1 *Options, err error)) *LoaderMock {
	if mmLoad.defaultExpectation != nil {
		mmLoad.mock.t.Fatalf("Default expectation is already set for the Loader.Load method")
	}

	if len(mmLoad.expectations) > 0 {
		mmLoad.mock.t.Fatalf("Some expectations are already set for the Loader.Load method")
	}

	mmLoad.mock.funcLoad = f
	return mmLoad.mock
}

// Load implements Loader
func (mmLoad *LoaderMock) Load() (op1 *Options, err error) {
	mm_atomic.AddUint64(&mmLoad.beforeLoadCounter, 1)
	defer mm_atomic.AddUint64(&mmLoad.afterLoadCounter, 1)

	if mmLoad.LoadMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmLoad.LoadMock.defaultExpectation.Counter, 1)

		results := mmLoad.LoadMock.defaultExpectation.results
		if results == nil {
			mmLoad.t.Fatal("No results are set for the LoaderMock.Load")
		}
		return (*results).op1, (*results).err
	}
	if mmLoad.funcLoad != nil {
		return mmLoad.funcLoad()
	}
	mmLoad.t.Fatalf("Unexpected call to LoaderMock.Load.")
	return
}

// LoadAfterCounter returns a count of finished LoaderMock.Load invocations
func (mmLoad *LoaderMock) LoadAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLoad.afterLoadCounter)
}

// LoadBeforeCounter returns a count of LoaderMock.Load invocations
func (mmLoad *LoaderMock) LoadBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLoad.beforeLoadCounter)
}

// MinimockLoadDone returns true if the count of the Load invocations corresponds
// the number of defined expectations
func (m *LoaderMock) MinimockLoadDone() bool {
	for _, e := range m.LoadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.LoadMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterLoadCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLoad != nil && mm_atomic.LoadUint64(&m.afterLoadCounter) < 1 {
		return false
	}
	return true
}

// MinimockLoadInspect logs each unmet expectation
func (m *LoaderMock) MinimockLoadInspect() {
	for _, e := range m.LoadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to LoaderMock.Load")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.LoadMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterLoadCounter) < 1 {
		m.t.Error("Expected call to LoaderMock.Load")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLoad != nil && mm_atomic.LoadUint64(&m.afterLoadCounter) < 1 {
		m.t.Error("Expected call to LoaderMock.Load")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LoaderMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockLoadInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LoaderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LoaderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockLoadDone()
}
